{"version":3,"names":[],"mappings":"","sources":["sweet-alert.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n// SweetAlert\n// 2014 (c) - Tristan Edwards\n// github.com/t4t5/sweetalert\n(function (window, document) {\n\n  var modalClass = '.sweet-alert',\n      overlayClass = '.sweet-overlay',\n      alertTypes = ['error', 'warning', 'info', 'success'],\n      defaultParams = {\n    title: '',\n    text: '',\n    type: null,\n    allowOutsideClick: false,\n    showCancelButton: false,\n    showConfirmButton: true,\n    closeOnConfirm: true,\n    closeOnCancel: true,\n    confirmButtonText: 'OK',\n    confirmButtonClass: 'btn-primary',\n    cancelButtonText: 'Cancel',\n    cancelButtonClass: 'btn-default',\n    containerClass: '',\n    titleClass: '',\n    textClass: '',\n    imageUrl: null,\n    imageSize: null,\n    timer: null\n  };\n\n  /*\n   * Manipulate DOM\n   */\n\n  var getModal = function getModal() {\n    return document.querySelector(modalClass);\n  },\n      getOverlay = function getOverlay() {\n    return document.querySelector(overlayClass);\n  },\n      hasClass = function hasClass(elem, className) {\n    return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');\n  },\n      addClass = function addClass(elem, className) {\n    if (className && !hasClass(elem, className)) {\n      elem.className += ' ' + className;\n    }\n  },\n      removeClass = function removeClass(elem, className) {\n    var newClass = ' ' + elem.className.replace(/[\\t\\r\\n]/g, ' ') + ' ';\n    if (hasClass(elem, className)) {\n      while (newClass.indexOf(' ' + className + ' ') >= 0) {\n        newClass = newClass.replace(' ' + className + ' ', ' ');\n      }\n      elem.className = newClass.replace(/^\\s+|\\s+$/g, '');\n    }\n  },\n      escapeHtml = function escapeHtml(str) {\n    var div = document.createElement('div');\n    div.appendChild(document.createTextNode(str));\n    return div.innerHTML;\n  },\n      _show = function _show(elem) {\n    elem.style.opacity = '';\n    elem.style.display = 'block';\n  },\n      show = function show(elems) {\n    if (elems && !elems.length) {\n      return _show(elems);\n    }\n    for (var i = 0; i < elems.length; ++i) {\n      _show(elems[i]);\n    }\n  },\n      _hide = function _hide(elem) {\n    elem.style.opacity = '';\n    elem.style.display = 'none';\n  },\n      hide = function hide(elems) {\n    if (elems && !elems.length) {\n      return _hide(elems);\n    }\n    for (var i = 0; i < elems.length; ++i) {\n      _hide(elems[i]);\n    }\n  },\n      isDescendant = function isDescendant(parent, child) {\n    var node = child.parentNode;\n    while (node !== null) {\n      if (node === parent) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  },\n      getTopMargin = function getTopMargin(elem) {\n    elem.style.left = '-9999px';\n    elem.style.display = 'block';\n\n    var height = elem.clientHeight;\n    var padding = parseInt(getComputedStyle(elem).getPropertyValue('padding'), 10);\n\n    elem.style.left = '';\n    elem.style.display = 'none';\n    return '-' + parseInt(height / 2 + padding) + 'px';\n  },\n      fadeIn = function fadeIn(elem, interval) {\n    if (+elem.style.opacity < 1) {\n      interval = interval || 16;\n      elem.style.opacity = 0;\n      elem.style.display = 'block';\n      var last = +new Date();\n      var tick = function tick() {\n        elem.style.opacity = +elem.style.opacity + (new Date() - last) / 100;\n        last = +new Date();\n\n        if (+elem.style.opacity < 1) {\n          setTimeout(tick, interval);\n        }\n      };\n      tick();\n    }\n  },\n      fadeOut = function fadeOut(elem, interval) {\n    interval = interval || 16;\n    elem.style.opacity = 1;\n    var last = +new Date();\n    var tick = function tick() {\n      elem.style.opacity = +elem.style.opacity - (new Date() - last) / 100;\n      last = +new Date();\n\n      if (+elem.style.opacity > 0) {\n        setTimeout(tick, interval);\n      } else {\n        elem.style.display = 'none';\n      }\n    };\n    tick();\n  },\n      fireClick = function fireClick(node) {\n    // Taken from http://www.nonobtrusive.com/2011/11/29/programatically-fire-crossbrowser-click-event-with-javascript/\n    // Then fixed for today's Chrome browser.\n    if (MouseEvent) {\n      // Up-to-date approach\n      var mevt = new MouseEvent('click', {\n        view: window,\n        bubbles: false,\n        cancelable: true\n      });\n      node.dispatchEvent(mevt);\n    } else if (document.createEvent) {\n      // Fallback\n      var evt = document.createEvent('MouseEvents');\n      evt.initEvent('click', false, false);\n      node.dispatchEvent(evt);\n    } else if (document.createEventObject) {\n      node.fireEvent('onclick');\n    } else if (typeof node.onclick === 'function') {\n      node.onclick();\n    }\n  },\n      stopEventPropagation = function stopEventPropagation(e) {\n    // In particular, make sure the space bar doesn't scroll the main window.\n    if (typeof e.stopPropagation === 'function') {\n      e.stopPropagation();\n      e.preventDefault();\n    } else if (window.event && window.event.hasOwnProperty('cancelBubble')) {\n      window.event.cancelBubble = true;\n    }\n  };\n\n  // Remember state in cases where opening and handling a modal will fiddle with it.\n  var previousActiveElement, previousDocumentClick, previousWindowKeyDown, lastFocusedButton;\n\n  /*\n   * Add modal + overlay to DOM\n   */\n\n  window.sweetAlertInitialize = function () {\n    var sweetHTML = '<div class=\"sweet-overlay\" tabIndex=\"-1\"></div><div class=\"sweet-alert\" tabIndex=\"-1\"><div class=\"icon error\"><span class=\"x-mark\"><span class=\"line left\"></span><span class=\"line right\"></span></span></div><div class=\"icon warning\"> <span class=\"body\"></span> <span class=\"dot\"></span> </div> <div class=\"icon info\"></div> <div class=\"icon success\"> <span class=\"line tip\"></span> <span class=\"line long\"></span> <div class=\"placeholder\"></div> <div class=\"fix\"></div> </div> <div class=\"icon custom\"></div> <h2>Title</h2><p class=\"lead text-muted\">Text</p><p><button class=\"cancel btn btn-lg\" tabIndex=\"2\">Cancel</button> <button class=\"confirm btn btn-lg\" tabIndex=\"1\">OK</button></p></div>',\n        sweetWrap = document.createElement('div');\n\n    sweetWrap.innerHTML = sweetHTML;\n\n    // For readability: check sweet-alert.html\n    document.body.appendChild(sweetWrap);\n\n    // For development use only!\n    /*jQuery.ajax({\n      url: '../lib/sweet-alert.html', // Change path depending on file location\n      dataType: 'html'\n    })\n    .done(function(html) {\n      jQuery('body').append(html);\n    });*/\n  };\n\n  /*\n   * Global sweetAlert function\n   */\n\n  window.sweetAlert = window.swal = function () {\n    if (arguments[0] === undefined) {\n      window.console.error('sweetAlert expects at least 1 attribute!');\n      return false;\n    }\n\n    var params = extend({}, defaultParams);\n\n    switch (_typeof(arguments[0])) {\n\n      case 'string':\n        params.title = arguments[0];\n        params.text = arguments[1] || '';\n        params.type = arguments[2] || '';\n\n        break;\n\n      case 'object':\n        if (arguments[0].title === undefined) {\n          window.console.error('Missing \"title\" argument!');\n          return false;\n        }\n\n        params.title = arguments[0].title;\n        params.text = arguments[0].text || defaultParams.text;\n        params.type = arguments[0].type || defaultParams.type;\n        params.allowOutsideClick = arguments[0].allowOutsideClick || defaultParams.allowOutsideClick;\n        params.showCancelButton = arguments[0].showCancelButton !== undefined ? arguments[0].showCancelButton : defaultParams.showCancelButton;\n        params.showConfirmButton = arguments[0].showConfirmButton !== undefined ? arguments[0].showConfirmButton : defaultParams.showConfirmButton;\n        params.closeOnConfirm = arguments[0].closeOnConfirm !== undefined ? arguments[0].closeOnConfirm : defaultParams.closeOnConfirm;\n        params.closeOnCancel = arguments[0].closeOnCancel !== undefined ? arguments[0].closeOnCancel : defaultParams.closeOnCancel;\n        params.timer = arguments[0].timer || defaultParams.timer;\n\n        // Show \"Confirm\" instead of \"OK\" if cancel button is visible\n        params.confirmButtonText = defaultParams.showCancelButton ? 'Confirm' : defaultParams.confirmButtonText;\n        params.confirmButtonText = arguments[0].confirmButtonText || defaultParams.confirmButtonText;\n        params.confirmButtonClass = arguments[0].confirmButtonClass || (arguments[0].type ? 'btn-' + arguments[0].type : null) || defaultParams.confirmButtonClass;\n        params.cancelButtonText = arguments[0].cancelButtonText || defaultParams.cancelButtonText;\n        params.cancelButtonClass = arguments[0].cancelButtonClass || defaultParams.cancelButtonClass;\n        params.containerClass = arguments[0].containerClass || defaultParams.containerClass;\n        params.titleClass = arguments[0].titleClass || defaultParams.titleClass;\n        params.textClass = arguments[0].textClass || defaultParams.textClass;\n        params.imageUrl = arguments[0].imageUrl || defaultParams.imageUrl;\n        params.imageSize = arguments[0].imageSize || defaultParams.imageSize;\n        params.doneFunction = arguments[1] || null;\n\n        break;\n\n      default:\n        window.console.error('Unexpected type of argument! Expected \"string\" or \"object\", got ' + _typeof(arguments[0]));\n        return false;\n\n    }\n\n    setParameters(params);\n    fixVerticalPosition();\n    openModal();\n\n    // Modal interactions\n    var modal = getModal();\n\n    // Mouse interactions\n    var onButtonEvent = function onButtonEvent(e) {\n\n      var target = e.target || e.srcElement,\n          targetedConfirm = target.className.indexOf('confirm') > -1,\n          modalIsVisible = hasClass(modal, 'visible'),\n          doneFunctionExists = params.doneFunction && modal.getAttribute('data-has-done-function') === 'true';\n\n      switch (e.type) {\n        case \"click\":\n          if (targetedConfirm && doneFunctionExists && modalIsVisible) {\n            // Clicked \"confirm\"\n\n            params.doneFunction(true);\n\n            if (params.closeOnConfirm) {\n              closeModal();\n            }\n          } else if (doneFunctionExists && modalIsVisible) {\n            // Clicked \"cancel\"\n\n            // Check if callback function expects a parameter (to track cancel actions)\n            var functionAsStr = String(params.doneFunction).replace(/\\s/g, '');\n            var functionHandlesCancel = functionAsStr.substring(0, 9) === \"function(\" && functionAsStr.substring(9, 10) !== \")\";\n\n            if (functionHandlesCancel) {\n              params.doneFunction(false);\n            }\n\n            if (params.closeOnCancel) {\n              closeModal();\n            }\n          } else {\n            closeModal();\n          }\n\n          break;\n      }\n    };\n\n    var $buttons = modal.querySelectorAll('button');\n    for (var i = 0; i < $buttons.length; i++) {\n      $buttons[i].onclick = onButtonEvent;\n    }\n\n    // Remember the current document.onclick event.\n    previousDocumentClick = document.onclick;\n    document.onclick = function (e) {\n      var target = e.target || e.srcElement;\n\n      var clickedOnModal = modal === target,\n          clickedOnModalChild = isDescendant(modal, e.target),\n          modalIsVisible = hasClass(modal, 'visible'),\n          outsideClickIsAllowed = modal.getAttribute('data-allow-ouside-click') === 'true';\n\n      if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && outsideClickIsAllowed) {\n        closeModal();\n      }\n    };\n\n    // Keyboard interactions\n    var $okButton = modal.querySelector('button.confirm'),\n        $cancelButton = modal.querySelector('button.cancel'),\n        $modalButtons = modal.querySelectorAll('button:not([type=hidden])');\n\n    function handleKeyDown(e) {\n      var keyCode = e.keyCode || e.which;\n\n      if ([9, 13, 32, 27].indexOf(keyCode) === -1) {\n        // Don't do work on keys we don't care about.\n        return;\n      }\n\n      var $targetElement = e.target || e.srcElement;\n\n      var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.\n      for (var i = 0; i < $modalButtons.length; i++) {\n        if ($targetElement === $modalButtons[i]) {\n          btnIndex = i;\n          break;\n        }\n      }\n\n      if (keyCode === 9) {\n        // TAB\n        if (btnIndex === -1) {\n          // No button focused. Jump to the confirm button.\n          $targetElement = $okButton;\n        } else {\n          // Cycle to the next button\n          if (btnIndex === $modalButtons.length - 1) {\n            $targetElement = $modalButtons[0];\n          } else {\n            $targetElement = $modalButtons[btnIndex + 1];\n          }\n        }\n\n        stopEventPropagation(e);\n        $targetElement.focus();\n      } else {\n        if (keyCode === 13 || keyCode === 32) {\n          if (btnIndex === -1) {\n            // ENTER/SPACE clicked outside of a button.\n            $targetElement = $okButton;\n          } else {\n            // Do nothing - let the browser handle it.\n            $targetElement = undefined;\n          }\n        } else if (keyCode === 27 && !($cancelButton.hidden || $cancelButton.style.display === 'none')) {\n          // ESC to cancel only if there's a cancel button displayed (like the alert() window).\n          $targetElement = $cancelButton;\n        } else {\n          // Fallback - let the browser handle it.\n          $targetElement = undefined;\n        }\n\n        if ($targetElement !== undefined) {\n          fireClick($targetElement, e);\n        }\n      }\n    }\n\n    previousWindowKeyDown = window.onkeydown;\n    window.onkeydown = handleKeyDown;\n\n    function handleOnBlur(e) {\n      var $targetElement = e.target || e.srcElement,\n          $focusElement = e.relatedTarget,\n          modalIsVisible = hasClass(modal, 'visible');\n\n      if (modalIsVisible) {\n        var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.\n\n        if ($focusElement !== null) {\n          // If we picked something in the DOM to focus to, let's see if it was a button.\n          for (var i = 0; i < $modalButtons.length; i++) {\n            if ($focusElement === $modalButtons[i]) {\n              btnIndex = i;\n              break;\n            }\n          }\n\n          if (btnIndex === -1) {\n            // Something in the dom, but not a visible button. Focus back on the button.\n            $targetElement.focus();\n          }\n        } else {\n          // Exiting the DOM (e.g. clicked in the URL bar);\n          lastFocusedButton = $targetElement;\n        }\n      }\n    }\n\n    $okButton.onblur = handleOnBlur;\n    $cancelButton.onblur = handleOnBlur;\n\n    window.onfocus = function () {\n      // When the user has focused away and focused back from the whole window.\n      window.setTimeout(function () {\n        // Put in a timeout to jump out of the event sequence. Calling focus() in the event\n        // sequence confuses things.\n        if (lastFocusedButton !== undefined) {\n          lastFocusedButton.focus();\n          lastFocusedButton = undefined;\n        }\n      }, 0);\n    };\n  };\n\n  /**\n   * Set default params for each popup\n   * @param {Object} userParams\n   */\n  window.swal.setDefaults = function (userParams) {\n    if (!userParams) {\n      throw new Error('userParams is required');\n    }\n    if ((typeof userParams === 'undefined' ? 'undefined' : _typeof(userParams)) !== 'object') {\n      throw new Error('userParams has to be a object');\n    }\n\n    extend(defaultParams, userParams);\n  };\n\n  /**\n   * Closes the current modal\n   */\n  window.swal.close = function () {\n    closeModal();\n  };\n\n  /*\n   * Set type, text and actions on modal\n   */\n\n  function setParameters(params) {\n    var modal = getModal();\n\n    var $title = modal.querySelector('h2'),\n        $text = modal.querySelector('p'),\n        $cancelBtn = modal.querySelector('button.cancel'),\n        $confirmBtn = modal.querySelector('button.confirm');\n\n    // Title\n    $title.innerHTML = escapeHtml(params.title).split(\"\\n\").join(\"<br>\");\n\n    // Text\n    $text.innerHTML = escapeHtml(params.text || '').split(\"\\n\").join(\"<br>\");\n    if (params.text) {\n      show($text);\n    }\n\n    // Icon\n    hide(modal.querySelectorAll('.icon'));\n    if (params.type) {\n      var validType = false;\n      for (var i = 0; i < alertTypes.length; i++) {\n        if (params.type === alertTypes[i]) {\n          validType = true;\n          break;\n        }\n      }\n      if (!validType) {\n        window.console.error('Unknown alert type: ' + params.type);\n        return false;\n      }\n      var $icon = modal.querySelector('.icon.' + params.type);\n      show($icon);\n\n      // Animate icon\n      switch (params.type) {\n        case \"success\":\n          addClass($icon, 'animate');\n          addClass($icon.querySelector('.tip'), 'animateSuccessTip');\n          addClass($icon.querySelector('.long'), 'animateSuccessLong');\n          break;\n        case \"error\":\n          addClass($icon, 'animateErrorIcon');\n          addClass($icon.querySelector('.x-mark'), 'animateXMark');\n          break;\n        case \"warning\":\n          addClass($icon, 'pulseWarning');\n          addClass($icon.querySelector('.body'), 'pulseWarningIns');\n          addClass($icon.querySelector('.dot'), 'pulseWarningIns');\n          break;\n      }\n    }\n\n    // Custom image\n    if (params.imageUrl) {\n      var $customIcon = modal.querySelector('.icon.custom');\n\n      $customIcon.style.backgroundImage = 'url(' + params.imageUrl + ')';\n      show($customIcon);\n\n      var _imgWidth = 80,\n          _imgHeight = 80;\n\n      if (params.imageSize) {\n        var imgWidth = params.imageSize.split('x')[0];\n        var imgHeight = params.imageSize.split('x')[1];\n\n        if (!imgWidth || !imgHeight) {\n          window.console.error(\"Parameter imageSize expects value with format WIDTHxHEIGHT, got \" + params.imageSize);\n        } else {\n          _imgWidth = imgWidth;\n          _imgHeight = imgHeight;\n\n          $customIcon.css({\n            'width': imgWidth + 'px',\n            'height': imgHeight + 'px'\n          });\n        }\n      }\n      $customIcon.setAttribute('style', $customIcon.getAttribute('style') + 'width:' + _imgWidth + 'px; height:' + _imgHeight + 'px');\n    }\n\n    // Cancel button\n    modal.setAttribute('data-has-cancel-button', params.showCancelButton);\n    if (params.showCancelButton) {\n      $cancelBtn.style.display = 'inline-block';\n    } else {\n      hide($cancelBtn);\n    }\n\n    //Confirm button\n    modal.setAttribute('data-has-confirm-button', params.showConfirmButton);\n    if (params.showConfirmButton) {\n      $confirmBtn.style.display = 'inline-block';\n    } else {\n      hide($confirmBtn);\n    }\n\n    // Edit text on cancel and confirm buttons\n    if (params.cancelButtonText) {\n      $cancelBtn.innerHTML = escapeHtml(params.cancelButtonText);\n    }\n    if (params.confirmButtonText) {\n      $confirmBtn.innerHTML = escapeHtml(params.confirmButtonText);\n    }\n\n    // Reset confirm buttons to default class (Ugly fix)\n    $confirmBtn.className = 'confirm btn btn-lg';\n\n    // Attach selected class to the sweet alert modal\n    addClass(modal, params.containerClass);\n\n    // Set confirm button to selected class\n    addClass($confirmBtn, params.confirmButtonClass);\n\n    // Set cancel button to selected class\n    addClass($cancelBtn, params.cancelButtonClass);\n\n    // Set title to selected class\n    addClass($title, params.titleClass);\n\n    // Set text to selected class\n    addClass($text, params.textClass);\n\n    // Allow outside click?\n    modal.setAttribute('data-allow-ouside-click', params.allowOutsideClick);\n\n    // Done-function\n    var hasDoneFunction = params.doneFunction ? true : false;\n    modal.setAttribute('data-has-done-function', hasDoneFunction);\n\n    // Close timer\n    modal.setAttribute('data-timer', params.timer);\n  }\n\n  /*\n   * Set hover, active and focus-states for buttons (source: http://www.sitepoint.com/javascript-generate-lighter-darker-color)\n   */\n\n  function colorLuminance(hex, lum) {\n    // Validate hex string\n    hex = String(hex).replace(/[^0-9a-f]/gi, '');\n    if (hex.length < 6) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    lum = lum || 0;\n\n    // Convert to decimal and change luminosity\n    var rgb = \"#\",\n        c,\n        i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i * 2, 2), 16);\n      c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n      rgb += (\"00\" + c).substr(c.length);\n    }\n\n    return rgb;\n  }\n\n  function extend(a, b) {\n    for (var key in b) {\n      if (b.hasOwnProperty(key)) {\n        a[key] = b[key];\n      }\n    }\n\n    return a;\n  }\n\n  function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) : null;\n  }\n\n  // Add box-shadow style to button (depending on its chosen bg-color)\n  function setFocusStyle($button, bgColor) {\n    var rgbColor = hexToRgb(bgColor);\n    $button.style.boxShadow = '0 0 2px rgba(' + rgbColor + ', 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)';\n  }\n\n  /*\n   * Animations\n   */\n\n  function openModal() {\n    var modal = getModal();\n    fadeIn(getOverlay(), 10);\n    show(modal);\n    addClass(modal, 'showSweetAlert');\n    removeClass(modal, 'hideSweetAlert');\n\n    previousActiveElement = document.activeElement;\n    var $okButton = modal.querySelector('button.confirm');\n    $okButton.focus();\n\n    setTimeout(function () {\n      addClass(modal, 'visible');\n    }, 500);\n\n    var timer = modal.getAttribute('data-timer');\n    if (timer !== \"null\" && timer !== \"\") {\n      setTimeout(function () {\n        closeModal();\n      }, timer);\n    }\n  }\n\n  function closeModal() {\n    var modal = getModal();\n    fadeOut(getOverlay(), 5);\n    fadeOut(modal, 5);\n    removeClass(modal, 'showSweetAlert');\n    addClass(modal, 'hideSweetAlert');\n    removeClass(modal, 'visible');\n\n    // Reset icon animations\n\n    var $successIcon = modal.querySelector('.icon.success');\n    removeClass($successIcon, 'animate');\n    removeClass($successIcon.querySelector('.tip'), 'animateSuccessTip');\n    removeClass($successIcon.querySelector('.long'), 'animateSuccessLong');\n\n    var $errorIcon = modal.querySelector('.icon.error');\n    removeClass($errorIcon, 'animateErrorIcon');\n    removeClass($errorIcon.querySelector('.x-mark'), 'animateXMark');\n\n    var $warningIcon = modal.querySelector('.icon.warning');\n    removeClass($warningIcon, 'pulseWarning');\n    removeClass($warningIcon.querySelector('.body'), 'pulseWarningIns');\n    removeClass($warningIcon.querySelector('.dot'), 'pulseWarningIns');\n\n    // Reset the page to its previous state\n    window.onkeydown = previousWindowKeyDown;\n    document.onclick = previousDocumentClick;\n    if (previousActiveElement) {\n      previousActiveElement.focus();\n    }\n    lastFocusedButton = undefined;\n  }\n\n  /*\n   * Set \"margin-top\"-property on modal based on its computed height\n   */\n\n  function fixVerticalPosition() {\n    var modal = getModal();\n    modal.style.marginTop = getTopMargin(getModal());\n  }\n\n  /*\n   * If library is injected after page has loaded\n   */\n\n  (function () {\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\" && document.body) {\n      sweetAlertInitialize();\n    } else {\n      if (document.addEventListener) {\n        document.addEventListener('DOMContentLoaded', function handler() {\n          document.removeEventListener('DOMContentLoaded', handler, false);\n          sweetAlertInitialize();\n        }, false);\n      } else if (document.attachEvent) {\n        document.attachEvent('onreadystatechange', function handler() {\n          if (document.readyState === 'complete') {\n            document.detachEvent('onreadystatechange', handler);\n            sweetAlertInitialize();\n          }\n        });\n      }\n    }\n  })();\n})(window, document);\n\n},{}]},{},[1]);\n"],"file":"sweet-alert.js","sourceRoot":"/source/"}